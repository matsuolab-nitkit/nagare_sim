<launch>

    <arg name="uuv_name" default="nagare"/>
    
    <!-- Name of the vehicle model: the name of the robot model -->
    <arg name="model_name" default="$(arg uuv_name)"/>

    <!-- Control effort saturation -->
    <arg name="saturation" default="2000"/>
    <arg name="gui_on" default="true" doc="Start Gazebo client and RViz"/>
    <arg name="use_ned_frame" default="false" doc="If true, the reference frame is set to be NED (North-East-Down) instead of Gazebo's default ENU (East-North-Up)"/>
    <!--
    The controller parameters are given below and will be given to the controller node in its
    private namespace. These are vectors and for roslaunch to see this as one argument, there
    can be no spaces between the commas and the floating point values. The default values
    are usually the ones that are going to be used.
    -->
    <arg name="Kp" default="0.5,0.50,1.50,0,0,0.50"/>
    <!-- <arg name="Kp" default="10.0,0.5,0.5,0.5,0.5,0"/> -->
    <arg name="Kd" default="0.1,0.1,0.5,0.1,0.1,0.50"/>
    <arg name="Ki" default="0,0,0,0,0,0"/>

    <arg name="x" default="0" doc="X coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="y" default="0" doc="Y coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="z" default="-0.1" doc="Z coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="yaw" default="0" doc="Yaw angle of the vehicle's initial orientation"/>

    <!-- <arg name="output_dir" default="$(find bluerov_control)/config"/>
    <arg name="config_file" default="$(find bluerov_control)/config/thruster_manager.yaml"/>
    <arg name="tam_file" default="$(find bluerov_control)/config/TAM.yaml"/> -->
    <arg name="output_dir" default="$(find nagare_control)/config"/>
    <arg name="config_file" default="$(find nagare_control)/config/thruster_manager.yaml"/>
    <arg name="tam_file" default="$(find nagare_control)/config/TAM.yaml"/>

    <include file="$(find uuv_thruster_manager)/launch/thruster_manager.launch">
        <arg name="uuv_name" value="$(arg uuv_name)"/>
        <arg name="model_name" value="$(arg model_name)"/>
        <arg name="output_dir" value="$(arg output_dir)"/>
        <arg name="config_file" value="$(arg config_file)"/>
        <arg name="tam_file" value="$(arg tam_file)"/>
    </include>
    <include file="$(find uuv_gazebo_worlds)/launch/ocean_waves.launch"/>
    <include file="$(find uuv_simulation_wrapper)/launch/unpause_simulation.launch">
        <arg name="timeout" value="5"/>
    </include>
    <include file="$(find bluerov_description)/launch/upload.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="yaw" value="$(arg yaw)"/>
    </include>
    <!-- <include file="$(find nagare_description)/launch/upload.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="yaw" value="$(arg yaw)"/>
    </include> -->
    <group ns="$(arg uuv_name)">
        <node pkg="uuv_control_utils"
              type="trajectory_marker_publisher.py"
              name="trajectory_marker_publisher"
              output="screen">
            <remap from="trajectory" to="dp_controller/trajectory"/>
            <remap from="waypoints" to="dp_controller/waypoints"/>
        </node>

        <node pkg="uuv_tutorial_dp_controller"
            type="tutorial_dp_controller.py"
            name="tutorial_dp_controller"
            output="screen">
            <!-- Remap necessary topics -->
            <remap from="odom" to="pose_gt"/>
            <remap from="trajectory" to="dp_controller/trajectory"/>
            <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
            <remap from="waypoints" to="dp_controller/waypoints"/>
            <remap from="error" to="dp_controller/error"/>
            <remap from="reference" to="dp_controller/reference"/>
            <remap from="thruster_output" to="thruster_manager/input_stamped"/>
            <!-- Set the controller parameters in the node's private namespace-->
            <rosparam subst_value="true">
                saturation: $(arg saturation)
                Kp: [$(arg Kp)]
                Kd: [$(arg Kd)]
                Ki: [$(arg Ki)]
            </rosparam>
        </node>
    </group>

    <!--
    Now run the demo file to start a new simulation with this controller

    >> roslaunch uuv_tutorial_dp_controller start_tutorial_dp_controller_demo.launch
    -->
</launch>